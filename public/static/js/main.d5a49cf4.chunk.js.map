{"version":3,"sources":["Components/login.js","App.js","index.js"],"names":["compose","firebaseConnect","connect","_ref2","auth","firebase","_ref","react_default","a","createElement","className","onClick","login","provider","type","App","Component","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","store","reactReduxFirebase","userProfile","enableLogging","createStore","createStoreWithFirebase","combineReducers","firebaseReducer","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"yRA0BeA,cACbC,4BACAC,YAAQ,SAAAC,GAAA,MAA6B,CAAEC,KAA/BD,EAAGE,SAAYD,QAFVJ,CAnBU,SAAAM,GAAA,IAAGD,EAAHC,EAAGD,SAAHC,EAAaF,KAAb,OACvBG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UACEE,QAAS,kBAAMN,EAASO,MAAM,CAAEC,SAAU,SAAUC,KAAM,YAD5D,qBAGAP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBCDSM,2LANX,OACER,EAAAC,EAAAC,cAACG,EAAD,aAHYI,cCclBX,IAASY,cARc,CAChBC,OAAQ,0CACPC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,iBAI3B,IAeMC,EAV0BxB,YAC9ByB,6BAAmBpB,IANH,CAChBqB,YAAa,QACbC,eAAe,IAGe3B,CAE9B4B,IAQYC,CALMC,YAAgB,CAClCzB,SAAU0B,oBAGS,IAGrBC,IAASC,OACR1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAUV,MAAUA,GACnBjB,EAAAC,EAAAC,cAAC0B,EAAD,OAEEC,SAASC,eAAe","file":"static/js/main.d5a49cf4.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { firebaseConnect, } from 'react-redux-firebase'\r\n// import GoogleButton from 'react-google-button' // optional\r\n\r\nexport const LoginPage = ({ firebase, auth }) => (\r\n  <div className=\"abc\">\r\n    <button // <GoogleButton/> button can be used instead\r\n      onClick={() => firebase.login({ provider: 'google', type: 'popup' })}\r\n    >Login With Google</button>\r\n    <div>\r\n      <h2>Auth</h2>\r\n     \r\n    </div>\r\n  </div>\r\n)\r\n\r\nLoginPage.propTypes = {\r\n  firebase: PropTypes.shape({\r\n    login: PropTypes.func.isRequired\r\n  }),\r\n  auth: PropTypes.object\r\n}\r\n\r\nexport default compose(\r\n  firebaseConnect(), // withFirebase can also be used\r\n  connect(({ firebase: { auth } }) => ({ auth }))\r\n)(LoginPage)","import React, { Component } from 'react';\nimport LoginPage from './Components/login'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <LoginPage/>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, compose } from 'redux';\nimport { reactReduxFirebase, firebaseReducer } from 'react-redux-firebase';\nimport firebase from 'firebase';\n\nimport App from './App';\n\n\nconst firebaseConfig = {\n\t      apiKey: \"AIzaSyDPGLc3O1-s4CcRUDdqgyNwSwTVHrh6foc\",\n        authDomain: \"chatapp-5cefa.firebaseapp.com\",\n        databaseURL: \"https://chatapp-5cefa.firebaseio.com\",\n        projectId: \"chatapp-5cefa\",\n        storageBucket: \"chatapp-5cefa.appspot.com\",\n        messagingSenderId: \"377441370514\"\n}\nfirebase.initializeApp(firebaseConfig)\n\nconst rrfConfig = {\n  userProfile: 'users',\n  enableLogging: false, \n}\n\nconst createStoreWithFirebase = compose(\n  reactReduxFirebase(firebase, rrfConfig), \n)(createStore)\n\n\nconst rootReducer = combineReducers({\n  firebase: firebaseReducer,\n})\n\nconst initialState = {}\nconst store = createStoreWithFirebase(rootReducer, initialState)\n\nReactDOM.render(\n\t<Provider store = { store }>\n\t\t<App />\n\t</Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}